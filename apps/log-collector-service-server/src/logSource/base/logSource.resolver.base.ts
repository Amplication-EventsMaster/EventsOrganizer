/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LogSource } from "./LogSource";
import { LogSourceCountArgs } from "./LogSourceCountArgs";
import { LogSourceFindManyArgs } from "./LogSourceFindManyArgs";
import { LogSourceFindUniqueArgs } from "./LogSourceFindUniqueArgs";
import { CreateLogSourceArgs } from "./CreateLogSourceArgs";
import { UpdateLogSourceArgs } from "./UpdateLogSourceArgs";
import { DeleteLogSourceArgs } from "./DeleteLogSourceArgs";
import { LogSourceService } from "../logSource.service";
@graphql.Resolver(() => LogSource)
export class LogSourceResolverBase {
  constructor(protected readonly service: LogSourceService) {}

  async _logSourcesMeta(
    @graphql.Args() args: LogSourceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LogSource])
  async logSources(
    @graphql.Args() args: LogSourceFindManyArgs
  ): Promise<LogSource[]> {
    return this.service.logSources(args);
  }

  @graphql.Query(() => LogSource, { nullable: true })
  async logSource(
    @graphql.Args() args: LogSourceFindUniqueArgs
  ): Promise<LogSource | null> {
    const result = await this.service.logSource(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LogSource)
  async createLogSource(
    @graphql.Args() args: CreateLogSourceArgs
  ): Promise<LogSource> {
    return await this.service.createLogSource({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LogSource)
  async updateLogSource(
    @graphql.Args() args: UpdateLogSourceArgs
  ): Promise<LogSource | null> {
    try {
      return await this.service.updateLogSource({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LogSource)
  async deleteLogSource(
    @graphql.Args() args: DeleteLogSourceArgs
  ): Promise<LogSource | null> {
    try {
      return await this.service.deleteLogSource(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
