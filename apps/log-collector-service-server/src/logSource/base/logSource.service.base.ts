/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LogSource as PrismaLogSource } from "@prisma/client";

export class LogSourceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LogSourceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.logSource.count(args);
  }

  async logSources<T extends Prisma.LogSourceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogSourceFindManyArgs>
  ): Promise<PrismaLogSource[]> {
    return this.prisma.logSource.findMany<Prisma.LogSourceFindManyArgs>(args);
  }
  async logSource<T extends Prisma.LogSourceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogSourceFindUniqueArgs>
  ): Promise<PrismaLogSource | null> {
    return this.prisma.logSource.findUnique(args);
  }
  async createLogSource<T extends Prisma.LogSourceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogSourceCreateArgs>
  ): Promise<PrismaLogSource> {
    return this.prisma.logSource.create<T>(args);
  }
  async updateLogSource<T extends Prisma.LogSourceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogSourceUpdateArgs>
  ): Promise<PrismaLogSource> {
    return this.prisma.logSource.update<T>(args);
  }
  async deleteLogSource<T extends Prisma.LogSourceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogSourceDeleteArgs>
  ): Promise<PrismaLogSource> {
    return this.prisma.logSource.delete(args);
  }
}
