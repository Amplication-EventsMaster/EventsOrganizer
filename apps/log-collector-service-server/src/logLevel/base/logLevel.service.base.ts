/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LogLevel as PrismaLogLevel } from "@prisma/client";

export class LogLevelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LogLevelCountArgs, "select">): Promise<number> {
    return this.prisma.logLevel.count(args);
  }

  async logLevels<T extends Prisma.LogLevelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogLevelFindManyArgs>
  ): Promise<PrismaLogLevel[]> {
    return this.prisma.logLevel.findMany<Prisma.LogLevelFindManyArgs>(args);
  }
  async logLevel<T extends Prisma.LogLevelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogLevelFindUniqueArgs>
  ): Promise<PrismaLogLevel | null> {
    return this.prisma.logLevel.findUnique(args);
  }
  async createLogLevel<T extends Prisma.LogLevelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogLevelCreateArgs>
  ): Promise<PrismaLogLevel> {
    return this.prisma.logLevel.create<T>(args);
  }
  async updateLogLevel<T extends Prisma.LogLevelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogLevelUpdateArgs>
  ): Promise<PrismaLogLevel> {
    return this.prisma.logLevel.update<T>(args);
  }
  async deleteLogLevel<T extends Prisma.LogLevelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogLevelDeleteArgs>
  ): Promise<PrismaLogLevel> {
    return this.prisma.logLevel.delete(args);
  }
}
